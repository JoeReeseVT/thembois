#include "stm32l476xx.h"
#include "LCD.h"

void EXT_Initialize(void);
void updateScreen(uint8_t* str);


int main() {

	LCD_Initialization();
	EXT_Initialize();
	while(1)
	{
		
	}
	
	return 0;
}



void updateScreen(uint8_t* str)
{
	LCD_DisplayString(str);
}
		

void EXT_Initialize()
{
	//NVIC->ISER[0] |= 0x100; //0001,0000,0000
	
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN; //enable port A
	GPIOA->MODER &= ~(GPIO_MODER_MODER3); //set to input mode
	//GPIOA->PUPDR |= GPIO_PUPDR_PUPDR0_1; // pin 0
	GPIOA->PUPDR |= GPIO_PUPDR_PUPDR3_1; // pull-DOWN pin 3
	//GPIOA->PUPDR |= GPIO_PUPDR_PUPDR5_1; // pull-down pin 5
	
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PA; //Set ext3 to port A (pin3)
	//SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA; //pin0
	SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI5_PA; //set ext5 to port A (pin 5)


	
	EXTI->IMR1 |= (1<<3); //interrupt mask
	EXTI->FTSR1 |= (1<<3); //falling trigger selection (enabled)
	//EXTI->IMR1 |= (1<<5); //interrupt mask
	//EXTI->FTSR1 |= (1<<5); //falling trigger selection (enabled)
	
	
	//EXTI->IMR1 |= (1<<0); //interrupt mask
	//EXTI->FTSR1 |= (1<<0); //falling trigger selection (enabled)
	
	
	
	__enable_irq();
	
	NVIC_ClearPendingIRQ(EXTI0_IRQn);
	//NVIC_ClearPendingIRQ(EXTI1_IRQn);
	
	NVIC_SetPriority(EXTI0_IRQn,0);
	//NVIC_SetPriority(EXTI1_IRQn,0);
	
	
	NVIC_EnableIRQ(EXTI0_IRQn); //enable interrupts on line 0 to 3
	//NVIC_EnableIRQ(EXTI1_IRQn); //enable interrupts on line 4 to 7

}



void EXTI0_IRQHandler()
{
	updateScreen((uint8_t*)"UP");
	if(!(GPIOA->IDR & (1<<3))) //see if line 3 is active
	{
		updateScreen((uint8_t*)"UP");
	}
	//EXTI->PR1 |= (1 << 3);
	NVIC_ClearPendingIRQ(EXTI3_IRQn);
	EXTI->PR1 |= (1<<3);
}

void EXTI1_IRQHandler()
{
	if(!(GPIOA->IDR & (1<<5))) //see if line 5 is active
	{
		updateScreen((uint8_t*)"DOWN");
	}
	//EXTI->PR1 |= (1 << 5);
	NVIC_ClearPendingIRQ(EXTI3_IRQn);
	EXTI->PR1 |= (1<<5);
}
